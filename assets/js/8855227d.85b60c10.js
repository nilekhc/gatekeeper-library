"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[480],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>u});var t=i(7294);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function o(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=t.createContext({}),p=function(e){var n=t.useContext(l),i=n;return e&&(i="function"==typeof e?e(n):o(o({},n),e)),i},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(i),u=a,b=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return i?t.createElement(b,o(o({ref:n},c),{},{components:i})):t.createElement(b,o({ref:n},c))}));function u(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=i[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,i)}d.displayName="MDXCreateElement"},8806:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var t=i(7462),a=(i(7294),i(3905));const r={id:"capabilities",title:"Capabilities"},o="Capabilities",s={unversionedId:"capabilities",id:"capabilities",title:"Capabilities",description:"Description",source:"@site/docs/capabilities.md",sourceDirName:".",slug:"/capabilities",permalink:"/gatekeeper-library/capabilities",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/capabilities.md",tags:[],version:"current",frontMatter:{id:"capabilities",title:"Capabilities"},sidebar:"docs",previous:{title:"App Armor",permalink:"/gatekeeper-library/apparmor"},next:{title:"FlexVolumes",permalink:"/gatekeeper-library/flexvolume-drivers"}},l={},p=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Examples",id:"examples",level:2}],c={toc:p};function m(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"capabilities"},"Capabilities"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Controls Linux capabilities on containers. Corresponds to the ",(0,a.kt)("inlineCode",{parentName:"p"},"allowedCapabilities")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"requiredDropCapabilities")," fields in a PodSecurityPolicy. For more information, see ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities"},"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities")),(0,a.kt)("h2",{id:"template"},"Template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspcapabilities\n  annotations:\n    metadata.gatekeeper.sh/title: "Capabilities"\n    description: >-\n      Controls Linux capabilities on containers. Corresponds to the\n      `allowedCapabilities` and `requiredDropCapabilities` fields in a\n      PodSecurityPolicy. For more information, see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPCapabilities\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls Linux capabilities on containers. Corresponds to the\n            `allowedCapabilities` and `requiredDropCapabilities` fields in a\n            PodSecurityPolicy. For more information, see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            allowedCapabilities:\n              type: array\n              description: "A list of Linux capabilities that can be added to a container."\n              items:\n                type: string\n            requiredDropCapabilities:\n              type: array\n              description: "A list of Linux capabilities that are required to be dropped from a container."\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package capabilities\n\n        import data.lib.exempt_container.is_exempt\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.containers[_]\n          not is_exempt(container)\n          has_disallowed_capabilities(container)\n          msg := sprintf("container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])\n        }\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.containers[_]\n          not is_exempt(container)\n          missing_drop_capabilities(container)\n          msg := sprintf("container <%v> is not dropping all required capabilities. Container must drop all of %v or \\"ALL\\"", [container.name, input.parameters.requiredDropCapabilities])\n        }\n\n\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.initContainers[_]\n          not is_exempt(container)\n          has_disallowed_capabilities(container)\n          msg := sprintf("init container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])\n        }\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.initContainers[_]\n          not is_exempt(container)\n          missing_drop_capabilities(container)\n          msg := sprintf("init container <%v> is not dropping all required capabilities. Container must drop all of %v or \\"ALL\\"", [container.name, input.parameters.requiredDropCapabilities])\n        }\n\n\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.ephemeralContainers[_]\n          not is_exempt(container)\n          has_disallowed_capabilities(container)\n          msg := sprintf("ephemeral container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])\n        }\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.ephemeralContainers[_]\n          not is_exempt(container)\n          missing_drop_capabilities(container)\n          msg := sprintf("ephemeral container <%v> is not dropping all required capabilities. Container must drop all of %v or \\"ALL\\"", [container.name, input.parameters.requiredDropCapabilities])\n        }\n\n\n        has_disallowed_capabilities(container) {\n          allowed := {c | c := lower(input.parameters.allowedCapabilities[_])}\n          not allowed["*"]\n          capabilities := {c | c := lower(container.securityContext.capabilities.add[_])}\n\n          count(capabilities - allowed) > 0\n        }\n\n        missing_drop_capabilities(container) {\n          must_drop := {c | c := lower(input.parameters.requiredDropCapabilities[_])}\n          all := {"all"}\n          dropped := {c | c := lower(container.securityContext.capabilities.drop[_])}\n\n          count(must_drop - dropped) > 0\n          count(all - dropped) > 0\n        }\n\n        get_default(obj, param, _default) = out {\n          out = obj[param]\n        }\n\n        get_default(obj, param, _default) = out {\n          not obj[param]\n          not obj[param] == false\n          out = _default\n        }\n      libs:\n        - |\n          package lib.exempt_container\n\n          is_exempt(container) {\n              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n              img := container.image\n              exemption := exempt_images[_]\n              _matches_exemption(img, exemption)\n          }\n\n          _matches_exemption(img, exemption) {\n              not endswith(exemption, "*")\n              exemption == img\n          }\n\n          _matches_exemption(img, exemption) {\n              endswith(exemption, "*")\n              prefix := trim_suffix(exemption, "*")\n              startswith(img, prefix)\n          }\n\n')),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"capabilities"),(0,a.kt)("blockquote",null,(0,a.kt)("details",null,(0,a.kt)("summary",null,"constraint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPCapabilities\nmetadata:\n  name: capabilities-demo\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n    namespaces:\n      - "default"\n  parameters:\n    allowedCapabilities: ["something"]\n    requiredDropCapabilities: ["must_drop"]\n\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"example-disallowed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: opa-disallowed\n  labels:\n    owner: me.agilebank.demo\nspec:\n  containers:\n    - name: opa\n      image: openpolicyagent/opa:0.9.2\n      args:\n        - "run"\n        - "--server"\n        - "--addr=localhost:8080"\n      securityContext:\n        capabilities:\n          add: ["disallowedcapability"]\n      resources:\n        limits:\n          cpu: "100m"\n          memory: "30Mi"\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"example-allowed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: opa-allowed\n  labels:\n    owner: me.agilebank.demo\nspec:\n  containers:\n    - name: opa\n      image: openpolicyagent/opa:0.9.2\n      args:\n        - "run"\n        - "--server"\n        - "--addr=localhost:8080"\n      securityContext:\n        capabilities:\n          add: ["something"]\n          drop: ["must_drop", "another_one"]\n      resources:\n        limits:\n          cpu: "100m"\n          memory: "30Mi"\n\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"disallowed-ephemeral"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: opa-disallowed\n  labels:\n    owner: me.agilebank.demo\nspec:\n  ephemeralContainers:\n    - name: opa\n      image: openpolicyagent/opa:0.9.2\n      args:\n        - "run"\n        - "--server"\n        - "--addr=localhost:8080"\n      securityContext:\n        capabilities:\n          add: ["disallowedcapability"]\n      resources:\n        limits:\n          cpu: "100m"\n          memory: "30Mi"\n\n'))))))}m.isMDXComponent=!0}}]);