"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[109],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=i.createContext({}),c=function(e){var n=i.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(m.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(t),g=r,f=p["".concat(m,".").concat(g)]||p[g]||l[g]||o;return t?i.createElement(f,s(s({ref:n},u),{},{components:t})):i.createElement(f,s({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=p;var a={};for(var m in n)hasOwnProperty.call(n,m)&&(a[m]=n[m]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var c=2;c<o;c++)s[c]=t[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},617:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=t(7462),r=(t(7294),t(3905));const o={id:"containerrequests",title:"Container Requests"},s="Container Requests",a={unversionedId:"containerrequests",id:"containerrequests",title:"Container Requests",description:"Description",source:"@site/docs/containerrequests.md",sourceDirName:".",slug:"/containerrequests",permalink:"/gatekeeper-library/containerrequests",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/containerrequests.md",tags:[],version:"current",frontMatter:{id:"containerrequests",title:"Container Requests"},sidebar:"docs",previous:{title:"Container Limits",permalink:"/gatekeeper-library/containerlimits"},next:{title:"Container Ratios",permalink:"/gatekeeper-library/containerresourceratios"}},m={},c=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Examples",id:"examples",level:2}],u={toc:c};function l(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"container-requests"},"Container Requests"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"Requires containers to have memory and CPU requests set and constrains requests to be within the specified maximum values.\n",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"},"https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/")),(0,r.kt)("h2",{id:"template"},"Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8scontainerrequests\n  annotations:\n    metadata.gatekeeper.sh/title: "Container Requests"\n    description: >-\n      Requires containers to have memory and CPU requests set and constrains\n      requests to be within the specified maximum values.\n\n      https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sContainerRequests\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          properties:\n            exemptImages:\n              description: >-\n                Any container that uses an image that matches an entry in this list will be excluded\n                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.\n\n                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)\n                in order to avoid unexpectedly exempting images from an untrusted repository.\n              type: array\n              items:\n                type: string\n            cpu:\n              description: "The maximum allowed cpu request on a Pod, exclusive."\n              type: string\n            memory:\n              description: "The maximum allowed memory request on a Pod, exclusive."\n              type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8scontainerrequests\n\n        import data.lib.exempt_container.is_exempt\n\n        missing(obj, field) = true {\n          not obj[field]\n        }\n\n        missing(obj, field) = true {\n          obj[field] == ""\n        }\n\n        canonify_cpu(orig) = new {\n          is_number(orig)\n          new := orig * 1000\n        }\n\n        canonify_cpu(orig) = new {\n          not is_number(orig)\n          endswith(orig, "m")\n          new := to_number(replace(orig, "m", ""))\n        }\n\n        canonify_cpu(orig) = new {\n          not is_number(orig)\n          not endswith(orig, "m")\n          re_match("^[0-9]+(\\\\.[0-9]+)?$", orig)\n          new := to_number(orig) * 1000\n        }\n\n        # 10 ** 21\n        mem_multiple("E") = 1000000000000000000000 { true }\n\n        # 10 ** 18\n        mem_multiple("P") = 1000000000000000000 { true }\n\n        # 10 ** 15\n        mem_multiple("T") = 1000000000000000 { true }\n\n        # 10 ** 12\n        mem_multiple("G") = 1000000000000 { true }\n\n        # 10 ** 9\n        mem_multiple("M") = 1000000000 { true }\n\n        # 10 ** 6\n        mem_multiple("k") = 1000000 { true }\n\n        # 10 ** 3\n        mem_multiple("") = 1000 { true }\n\n        # Kubernetes accepts millibyte precision when it probably shouldn\'t.\n        # https://github.com/kubernetes/kubernetes/issues/28741\n        # 10 ** 0\n        mem_multiple("m") = 1 { true }\n\n        # 1000 * 2 ** 10\n        mem_multiple("Ki") = 1024000 { true }\n\n        # 1000 * 2 ** 20\n        mem_multiple("Mi") = 1048576000 { true }\n\n        # 1000 * 2 ** 30\n        mem_multiple("Gi") = 1073741824000 { true }\n\n        # 1000 * 2 ** 40\n        mem_multiple("Ti") = 1099511627776000 { true }\n\n        # 1000 * 2 ** 50\n        mem_multiple("Pi") = 1125899906842624000 { true }\n\n        # 1000 * 2 ** 60\n        mem_multiple("Ei") = 1152921504606846976000 { true }\n\n        get_suffix(mem) = suffix {\n          not is_string(mem)\n          suffix := ""\n        }\n\n        get_suffix(mem) = suffix {\n          is_string(mem)\n          count(mem) > 0\n          suffix := substring(mem, count(mem) - 1, -1)\n          mem_multiple(suffix)\n        }\n\n        get_suffix(mem) = suffix {\n          is_string(mem)\n          count(mem) > 1\n          suffix := substring(mem, count(mem) - 2, -1)\n          mem_multiple(suffix)\n        }\n\n        get_suffix(mem) = suffix {\n          is_string(mem)\n          count(mem) > 1\n          not mem_multiple(substring(mem, count(mem) - 1, -1))\n          not mem_multiple(substring(mem, count(mem) - 2, -1))\n          suffix := ""\n        }\n\n        get_suffix(mem) = suffix {\n          is_string(mem)\n          count(mem) == 1\n          not mem_multiple(substring(mem, count(mem) - 1, -1))\n          suffix := ""\n        }\n\n        get_suffix(mem) = suffix {\n          is_string(mem)\n          count(mem) == 0\n          suffix := ""\n        }\n\n        canonify_mem(orig) = new {\n          is_number(orig)\n          new := orig * 1000\n        }\n\n        canonify_mem(orig) = new {\n          not is_number(orig)\n          suffix := get_suffix(orig)\n          raw := replace(orig, suffix, "")\n          re_match("^[0-9]+(\\\\.[0-9]+)?$", raw)\n          new := to_number(raw) * mem_multiple(suffix)\n        }\n\n        violation[{"msg": msg}] {\n          general_violation[{"msg": msg, "field": "containers"}]\n        }\n\n        violation[{"msg": msg}] {\n          general_violation[{"msg": msg, "field": "initContainers"}]\n        }\n\n        # Ephemeral containers not checked as it is not possible to set field.\n\n        general_violation[{"msg": msg, "field": field}] {\n          container := input.review.object.spec[field][_]\n          not is_exempt(container)\n          cpu_orig := container.resources.requests.cpu\n          not canonify_cpu(cpu_orig)\n          msg := sprintf("container <%v> cpu request <%v> could not be parsed", [container.name, cpu_orig])\n        }\n\n        general_violation[{"msg": msg, "field": field}] {\n          container := input.review.object.spec[field][_]\n          not is_exempt(container)\n          mem_orig := container.resources.requests.memory\n          not canonify_mem(mem_orig)\n          msg := sprintf("container <%v> memory request <%v> could not be parsed", [container.name, mem_orig])\n        }\n\n        general_violation[{"msg": msg, "field": field}] {\n          container := input.review.object.spec[field][_]\n          not is_exempt(container)\n          not container.resources\n          msg := sprintf("container <%v> has no resource requests", [container.name])\n        }\n\n        general_violation[{"msg": msg, "field": field}] {\n          container := input.review.object.spec[field][_]\n          not is_exempt(container)\n          not container.resources.requests\n          msg := sprintf("container <%v> has no resource requests", [container.name])\n        }\n\n        general_violation[{"msg": msg, "field": field}] {\n          container := input.review.object.spec[field][_]\n          not is_exempt(container)\n          missing(container.resources.requests, "cpu")\n          msg := sprintf("container <%v> has no cpu request", [container.name])\n        }\n\n        general_violation[{"msg": msg, "field": field}] {\n          container := input.review.object.spec[field][_]\n          not is_exempt(container)\n          missing(container.resources.requests, "memory")\n          msg := sprintf("container <%v> has no memory request", [container.name])\n        }\n\n        general_violation[{"msg": msg, "field": field}] {\n          container := input.review.object.spec[field][_]\n          not is_exempt(container)\n          cpu_orig := container.resources.requests.cpu\n          cpu := canonify_cpu(cpu_orig)\n          max_cpu_orig := input.parameters.cpu\n          max_cpu := canonify_cpu(max_cpu_orig)\n          cpu > max_cpu\n          msg := sprintf("container <%v> cpu request <%v> is higher than the maximum allowed of <%v>", [container.name, cpu_orig, max_cpu_orig])\n        }\n\n        general_violation[{"msg": msg, "field": field}] {\n          container := input.review.object.spec[field][_]\n          not is_exempt(container)\n          mem_orig := container.resources.requests.memory\n          mem := canonify_mem(mem_orig)\n          max_mem_orig := input.parameters.memory\n          max_mem := canonify_mem(max_mem_orig)\n          mem > max_mem\n          msg := sprintf("container <%v> memory request <%v> is higher than the maximum allowed of <%v>", [container.name, mem_orig, max_mem_orig])\n        }\n      libs:\n        - |\n          package lib.exempt_container\n\n          is_exempt(container) {\n              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])\n              img := container.image\n              exemption := exempt_images[_]\n              _matches_exemption(img, exemption)\n          }\n\n          _matches_exemption(img, exemption) {\n              not endswith(exemption, "*")\n              exemption == img\n          }\n\n          _matches_exemption(img, exemption) {\n              endswith(exemption, "*")\n              prefix := trim_suffix(exemption, "*")\n              startswith(img, prefix)\n          }\n\n')),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"container-requests"),(0,r.kt)("blockquote",null,(0,r.kt)("details",null,(0,r.kt)("summary",null,"constraint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sContainerRequests\nmetadata:\n  name: container-must-have-requests\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    cpu: "200m"\n    memory: "1Gi"\n\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"example-allowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: opa-allowed\n  labels:\n    owner: me.agilebank.demo\nspec:\n  containers:\n    - name: opa\n      image: openpolicyagent/opa:0.9.2\n      args:\n        - "run"\n        - "--server"\n        - "--addr=localhost:8080"\n      resources:\n        requests:\n          cpu: "100m"\n          memory: "1Gi"\n\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"example-disallowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: opa-disallowed\n  labels:\n    owner: me.agilebank.demo\nspec:\n  containers:\n    - name: opa\n      image: openpolicyagent/opa:0.9.2\n      args:\n        - "run"\n        - "--server"\n        - "--addr=localhost:8080"\n      resources:\n        requests:\n          cpu: "100m"\n          memory: "2Gi"\n\n'))))))}l.isMDXComponent=!0}}]);