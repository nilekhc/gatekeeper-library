"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[701],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),l=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=l(e.components);return o.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=l(t),k=a,d=m["".concat(i,".").concat(k)]||m[k]||p[k]||r;return t?o.createElement(d,c(c({ref:n},s),{},{components:t})):o.createElement(d,c({ref:n},s))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,c=new Array(r);c[0]=m;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,c[1]=u;for(var l=2;l<r;l++)c[l]=t[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7952:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>u,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const r={id:"automount-serviceaccount-token",title:"Automount Service Account Token for Pod"},c="Automount Service Account Token for Pod",u={unversionedId:"automount-serviceaccount-token",id:"automount-serviceaccount-token",title:"Automount Service Account Token for Pod",description:"Description",source:"@site/docs/automount-serviceaccount-token.md",sourceDirName:".",slug:"/automount-serviceaccount-token",permalink:"/gatekeeper-library/automount-serviceaccount-token",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/automount-serviceaccount-token.md",tags:[],version:"current",frontMatter:{id:"automount-serviceaccount-token",title:"Automount Service Account Token for Pod"},sidebar:"docs",previous:{title:"Allowed Repositories",permalink:"/gatekeeper-library/allowedrepos"},next:{title:"Block Endpoint Edit Default Role",permalink:"/gatekeeper-library/block-endpoint-edit-default-role"}},i={},l=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Examples",id:"examples",level:2}],s={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"automount-service-account-token-for-pod"},"Automount Service Account Token for Pod"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Controls the ability of any Pod to enable automountServiceAccountToken."),(0,a.kt)("h2",{id:"template"},"Template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspautomountserviceaccounttokenpod\n  annotations:\n    metadata.gatekeeper.sh/title: "Automount Service Account Token for Pod"\n    description: >-\n      Controls the ability of any Pod to enable automountServiceAccountToken.\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPAutomountServiceAccountTokenPod\n      validation:\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the ability of any Pod to enable automountServiceAccountToken.\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8sautomountserviceaccounttoken\n\n        violation[{"msg": msg}] {\n            obj := input.review.object\n            mountServiceAccountToken(obj.spec)\n            msg := sprintf("Automounting service account token is disallowed, pod: %v", [obj.metadata.name])\n        }\n\n        mountServiceAccountToken(spec) {\n            spec.automountServiceAccountToken == true\n        }\n\n        # if there is no automountServiceAccountToken spec, check on volumeMount in containers. Service Account token is mounted on /var/run/secrets/kubernetes.io/serviceaccount\n        # https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#serviceaccount-admission-controller\n        mountServiceAccountToken(spec) {\n            not has_key(spec, "automountServiceAccountToken")\n            "/var/run/secrets/kubernetes.io/serviceaccount" == input_containers[_].volumeMounts[_].mountPath\n        }\n\n        input_containers[c] {\n            c := input.review.object.spec.containers[_]\n        }\n\n        input_containers[c] {\n            c := input.review.object.spec.initContainers[_]\n        }\n\n        # Ephemeral containers not checked as it is not possible to set field.\n\n        has_key(x, k) {\n            _ = x[k]\n        }\n\n')),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/automount-serviceaccount-token/template.yaml\n")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"automount-serviceaccount-token"),(0,a.kt)("blockquote",null,(0,a.kt)("details",null,(0,a.kt)("summary",null,"constraint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPAutomountServiceAccountTokenPod\nmetadata:\n  name: psp-automount-serviceaccount-token-pod\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n    excludedNamespaces: ["kube-system"]\n\n')),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/automount-serviceaccount-token/samples/automount-serviceaccount-token/constraint.yaml\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"example-allowed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-automountserviceaccounttoken-allowed\n  labels:\n    app: nginx-not-automountserviceaccounttoken\nspec:\n  automountServiceAccountToken: false\n  containers:\n  - name: nginx\n    image: nginx\n\n")),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/automount-serviceaccount-token/samples/automount-serviceaccount-token/constraint.yaml\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"example-disallowed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-automountserviceaccounttoken-disallowed\n  labels:\n    app: nginx-automountserviceaccounttoken\nspec:\n  automountServiceAccountToken: true\n  containers:\n  - name: nginx\n    image: nginx\n\n")),(0,a.kt)("p",null,"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/automount-serviceaccount-token/samples/automount-serviceaccount-token/constraint.yaml\n"))))))}p.isMDXComponent=!0}}]);