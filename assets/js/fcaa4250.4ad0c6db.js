"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[487],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,d=u["".concat(i,".").concat(h)]||u[h]||c[h]||s;return n?a.createElement(d,l(l({ref:t},m),{},{components:n})):a.createElement(d,l({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,l=new Array(s);l[0]=u;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const s={id:"host-filesystem",title:"Host Filesystem"},l="Host Filesystem",r={unversionedId:"host-filesystem",id:"host-filesystem",title:"Host Filesystem",description:"Description",source:"@site/docs/host-filesystem.md",sourceDirName:".",slug:"/host-filesystem",permalink:"/gatekeeper-library/website/host-filesystem",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/host-filesystem.md",tags:[],version:"current",frontMatter:{id:"host-filesystem",title:"Host Filesystem"},sidebar:"docs",previous:{title:"FS Group",permalink:"/gatekeeper-library/website/fsgroup"},next:{title:"Host Namespace",permalink:"/gatekeeper-library/website/host-namespaces"}},i={},p=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Examples",id:"examples",level:2}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"host-filesystem"},"Host Filesystem"),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Controls usage of the host filesystem. Corresponds to the ",(0,o.kt)("inlineCode",{parentName:"p"},"allowedHostPaths")," field in a PodSecurityPolicy. For more information, see ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems"},"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems")),(0,o.kt)("h2",{id:"template"},"Template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spsphostfilesystem\n  annotations:\n    metadata.gatekeeper.sh/title: "Host Filesystem"\n    description: >-\n      Controls usage of the host filesystem. Corresponds to the\n      `allowedHostPaths` field in a PodSecurityPolicy. For more information,\n      see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPHostFilesystem\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls usage of the host filesystem. Corresponds to the\n            `allowedHostPaths` field in a PodSecurityPolicy. For more information,\n            see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems\n          properties:\n            allowedHostPaths:\n              type: array\n              description: "An array of hostpath objects, representing paths and read/write configuration."\n              items:\n                type: object\n                properties:\n                  pathPrefix:\n                    type: string\n                    description: "The path prefix that the host volume must match."\n                  readOnly:\n                    type: boolean\n                    description: "when set to true, any container volumeMounts matching the pathPrefix must include `readOnly: true`."\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spsphostfilesystem\n\n        violation[{"msg": msg, "details": {}}] {\n            volume := input_hostpath_volumes[_]\n            allowedPaths := get_allowed_paths(input)\n            input_hostpath_violation(allowedPaths, volume)\n            msg := sprintf("HostPath volume %v is not allowed, pod: %v. Allowed path: %v", [volume, input.review.object.metadata.name, allowedPaths])\n        }\n\n        input_hostpath_violation(allowedPaths, volume) {\n            # An empty list means all host paths are blocked\n            allowedPaths == []\n        }\n        input_hostpath_violation(allowedPaths, volume) {\n            not input_hostpath_allowed(allowedPaths, volume)\n        }\n\n        get_allowed_paths(arg) = out {\n            not arg.parameters\n            out = []\n        }\n        get_allowed_paths(arg) = out {\n            not arg.parameters.allowedHostPaths\n            out = []\n        }\n        get_allowed_paths(arg) = out {\n            out = arg.parameters.allowedHostPaths\n        }\n\n        input_hostpath_allowed(allowedPaths, volume) {\n            allowedHostPath := allowedPaths[_]\n            path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)\n            not allowedHostPath.readOnly == true\n        }\n\n        input_hostpath_allowed(allowedPaths, volume) {\n            allowedHostPath := allowedPaths[_]\n            path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)\n            allowedHostPath.readOnly\n            not writeable_input_volume_mounts(volume.name)\n        }\n\n        writeable_input_volume_mounts(volume_name) {\n            container := input_containers[_]\n            mount := container.volumeMounts[_]\n            mount.name == volume_name\n            not mount.readOnly\n        }\n\n        # This allows "/foo", "/foo/", "/foo/bar" etc., but\n        # disallows "/fool", "/etc/foo" etc.\n        path_matches(prefix, path) {\n            a := path_array(prefix)\n            b := path_array(path)\n            prefix_matches(a, b)\n        }\n        path_array(p) = out {\n            p != "/"\n            out := split(trim(p, "/"), "/")\n        }\n        # This handles the special case for "/", since\n        # split(trim("/", "/"), "/") == [""]\n        path_array("/") = []\n\n        prefix_matches(a, b) {\n            count(a) <= count(b)\n            not any_not_equal_upto(a, b, count(a))\n        }\n\n        any_not_equal_upto(a, b, n) {\n            a[i] != b[i]\n            i < n\n        }\n\n        input_hostpath_volumes[v] {\n            v := input.review.object.spec.volumes[_]\n            has_field(v, "hostPath")\n        }\n\n        # has_field returns whether an object has a field\n        has_field(object, field) = true {\n            object[field]\n        }\n        input_containers[c] {\n            c := input.review.object.spec.containers[_]\n        }\n\n        input_containers[c] {\n            c := input.review.object.spec.initContainers[_]\n        }\n\n        input_containers[c] {\n            c := input.review.object.spec.ephemeralContainers[_]\n        }\n\n')),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"host-filesystem"),(0,o.kt)("blockquote",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"constraint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPHostFilesystem\nmetadata:\n  name: psp-host-filesystem\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    allowedHostPaths:\n    - readOnly: true\n      pathPrefix: "/foo"\n\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"example-disallowed"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-host-filesystem\n  labels:\n    app: nginx-host-filesystem-disallowed\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    volumeMounts:\n    - mountPath: /cache\n      name: cache-volume\n      readOnly: true\n  volumes:\n  - name: cache-volume\n    hostPath:\n      path: /tmp # directory location on host\n\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"example-allowed"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-host-filesystem\n  labels:\n    app: nginx-host-filesystem-disallowed\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n      volumeMounts:\n        - mountPath: /cache\n          name: cache-volume\n          readOnly: true\n  volumes:\n    - name: cache-volume\n      hostPath:\n        path: /foo/bar\n\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"disallowed-ephemeral"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-host-filesystem\n  labels:\n    app: nginx-host-filesystem-disallowed\nspec:\n  ephemeralContainers:\n  - name: nginx\n    image: nginx\n    volumeMounts:\n    - mountPath: /cache\n      name: cache-volume\n      readOnly: true\n  volumes:\n  - name: cache-volume\n    hostPath:\n      path: /tmp # directory location on host\n\n"))))))}c.isMDXComponent=!0}}]);