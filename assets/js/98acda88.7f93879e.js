"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[291],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),l=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||r;return t?o.createElement(b,c(c({ref:n},p),{},{components:t})):o.createElement(b,c({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,c=new Array(r);c[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<r;l++)c[l]=t[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3222:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const r={id:"noupdateserviceaccount",title:"Block updating Service Account"},c="Block updating Service Account",s={unversionedId:"noupdateserviceaccount",id:"noupdateserviceaccount",title:"Block updating Service Account",description:"Description",source:"@site/docs/noupdateserviceaccount.md",sourceDirName:".",slug:"/noupdateserviceaccount",permalink:"/gatekeeper-library/noupdateserviceaccount",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/noupdateserviceaccount.md",tags:[],version:"current",frontMatter:{id:"noupdateserviceaccount",title:"Block updating Service Account"},sidebar:"docs",previous:{title:"Image Digests",permalink:"/gatekeeper-library/imagedigests"},next:{title:"Pod Disruption Budget",permalink:"/gatekeeper-library/poddisruptionbudget"}},i={},l=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Examples",id:"examples",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"block-updating-service-account"},"Block updating Service Account"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Blocks updating the service account on resources that abstract over Pods. This policy is ignored in audit mode."),(0,a.kt)("h2",{id:"template"},"Template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: noupdateserviceaccount\n  annotations:\n    metadata.gatekeeper.sh/title: "Block updating Service Account"\n    description: "Blocks updating the service account on resources that abstract over Pods. This policy is ignored in audit mode."\nspec:\n  crd:\n    spec:\n      names:\n        kind: NoUpdateServiceAccount\n      validation:\n        openAPIV3Schema:\n          type: object\n          properties:\n            allowedGroups:\n              description: Groups that should be allowed to bypass the policy.\n              type: array\n              items:\n                type: string\n            allowedUsers:\n              description: Users that should be allowed to bypass the policy.\n              type: array\n              items:\n                type: string\n  targets:\n  - target: admission.k8s.gatekeeper.sh\n    rego: |\n      package noupdateserviceaccount\n\n      privileged(userInfo, allowedUsers, allowedGroups) {\n        # Allow if the user is in allowedUsers.\n        # Use object.get so omitted parameters can\'t cause policy bypass by\n        # evaluating to undefined.\n        username := object.get(userInfo, "username", "")\n        allowedUsers[_] == username\n      } {\n        # Allow if the user\'s groups intersect allowedGroups.\n        # Use object.get so omitted parameters can\'t cause policy bypass by\n        # evaluating to undefined.\n        userGroups := object.get(userInfo, "groups", [])\n        groups := {g | g := userGroups[_]}\n        allowed := {g | g := allowedGroups[_]}\n        intersection := groups & allowed\n        count(intersection) > 0\n      }\n\n      get_service_account(obj) = spec {\n        obj.kind == "Pod"\n        spec := obj.spec.serviceAccountName\n      } {\n        obj.kind == "ReplicationController"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "ReplicaSet"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "Deployment"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "StatefulSet"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "DaemonSet"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "Job"\n        spec := obj.spec.template.spec.serviceAccountName\n      } {\n        obj.kind == "CronJob"\n        spec := obj.spec.jobTemplate.spec.template.spec.serviceAccountName\n      }\n\n      violation[{"msg": msg}] {\n        # This policy only applies to updates of existing resources.\n        input.review.operation == "UPDATE"\n\n        # Use object.get so omitted parameters can\'t cause policy bypass by\n        # evaluating to undefined.\n        params := object.get(input, "parameters", {})\n        allowedUsers := object.get(params, "allowedUsers", [])\n        allowedGroups := object.get(params, "allowedGroups", [])\n\n        # Extract the service account.\n        oldKSA := get_service_account(input.review.oldObject)\n        newKSA := get_service_account(input.review.object)\n\n        # Deny unprivileged users and groups from changing serviceAccountName.\n        not privileged(input.review.userInfo, allowedUsers, allowedGroups)\n        oldKSA != newKSA\n        msg := "user does not have permission to modify serviceAccountName"\n      } {\n        # Defensively require object to have a serviceAccountName.\n        input.review.operation == "UPDATE"\n        not get_service_account(input.review.object)\n        msg := "missing serviceAccountName field in object under review"\n      } {\n        # Defensively require oldObject to have a serviceAccountName.\n        input.review.operation == "UPDATE"\n        not get_service_account(input.review.oldObject)\n        msg := "missing serviceAccountName field in oldObject under review"\n      }\n\n')),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"noupdateserviceaccount"),(0,a.kt)("blockquote",null,(0,a.kt)("details",null,(0,a.kt)("summary",null,"constraint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# IMPORTANT: Before deploying this policy, make sure you allow-list any groups\n# or users that need to deploy workloads to kube-system, such as cluster-\n# lifecycle controllers, addon managers, etc. Such controllers may need to\n# update service account names during automated rollouts (e.g. of refactored\n# configurations). You can allow-list them with the allowedGroups and\n# allowedUsers properties of the NoUpdateServiceAccount Constraint.\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: NoUpdateServiceAccount\nmetadata:\n  name: no-update-kube-system-service-account\nspec:\n  match:\n    namespaces: ["kube-system"]\n    kinds:\n    - apiGroups: [""]\n      kinds:\n      # You can optionally add "Pod" here, but it is unnecessary because\n      # Pod service account immutability is enforced by the Kubernetes API.\n      - "ReplicationController"\n    - apiGroups: ["apps"]\n      kinds:\n      - "ReplicaSet"\n      - "Deployment"\n      - "StatefulSet"\n      - "DaemonSet"\n    - apiGroups: ["batch"]\n      kinds:\n      # You can optionally add "Job" here, but it is unnecessary because\n      # Job service account immutability is enforced by the Kubernetes API.\n      - "CronJob"\n  parameters:\n    allowedGroups: []\n    allowedUsers: []\n\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"example-allowed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# Note: The gator tests currently require exactly one object per example file.\n# Since this is an update-triggered policy, at least two objects are technically\n# required to demonstrate it. Due to the gator requirement, we only have one\n# object below. The policy should allow changing everything but the\n# serviceAccountName field.\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: policy-test\n  namespace: kube-system\n  labels:\n    app: policy-test\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: policy-test-deploy\n  template:\n    metadata:\n      labels:\n        app: policy-test-deploy\n    spec:\n      # Changing anything except this field should be allowed by the policy.\n      serviceAccountName: policy-test-sa-1\n      containers:\n      - name: policy-test\n        image: ubuntu\n        command:\n        - /bin/bash\n        - -c\n        - sleep 99999\n\n"))))))}u.isMDXComponent=!0}}]);