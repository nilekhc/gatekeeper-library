"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[74],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=l.createContext({}),m=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=m(e.components);return l.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=m(t),c=r,v=d["".concat(s,".").concat(c)]||d[c]||u[c]||o;return t?l.createElement(v,a(a({ref:n},p),{},{components:t})):l.createElement(v,a({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var m=2;m<o;m++)a[m]=t[m];return l.createElement.apply(null,a)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var l=t(7462),r=(t(7294),t(3905));const o={id:"flexvolume-drivers",title:"FlexVolumes"},a="FlexVolumes",i={unversionedId:"flexvolume-drivers",id:"flexvolume-drivers",title:"FlexVolumes",description:"Description",source:"@site/docs/flexvolume-drivers.md",sourceDirName:".",slug:"/flexvolume-drivers",permalink:"/gatekeeper-library/flexvolume-drivers",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/flexvolume-drivers.md",tags:[],version:"current",frontMatter:{id:"flexvolume-drivers",title:"FlexVolumes"},sidebar:"docs",previous:{title:"Capabilities",permalink:"/gatekeeper-library/capabilities"},next:{title:"Forbidden Sysctls",permalink:"/gatekeeper-library/forbidden-sysctls"}},s={},m=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Examples",id:"examples",level:2}],p={toc:m};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flexvolumes"},"FlexVolumes"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,"Controls the allowlist of FlexVolume drivers. Corresponds to the ",(0,r.kt)("inlineCode",{parentName:"p"},"allowedFlexVolumes")," field in PodSecurityPolicy. For more information, see ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers"},"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers")),(0,r.kt)("h2",{id:"template"},"Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spspflexvolumes\n  annotations:\n    metadata.gatekeeper.sh/title: "FlexVolumes"\n    description: >-\n      Controls the allowlist of FlexVolume drivers. Corresponds to the\n      `allowedFlexVolumes` field in PodSecurityPolicy. For more information,\n      see\n      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPSPFlexVolumes\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          description: >-\n            Controls the allowlist of FlexVolume drivers. Corresponds to the\n            `allowedFlexVolumes` field in PodSecurityPolicy. For more information,\n            see\n            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers\n          properties:\n            allowedFlexVolumes:\n              type: array\n              description: "An array of AllowedFlexVolume objects."\n              items:\n                type: object\n                properties:\n                  driver:\n                    description: "The name of the FlexVolume driver."\n                    type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spspflexvolumes\n\n        violation[{"msg": msg, "details": {}}] {\n            volume := input_flexvolumes[_]\n            not input_flexvolumes_allowed(volume)\n            msg := sprintf("FlexVolume %v is not allowed, pod: %v. Allowed drivers: %v", [volume, input.review.object.metadata.name, input.parameters.allowedFlexVolumes])\n        }\n\n        input_flexvolumes_allowed(volume) {\n            input.parameters.allowedFlexVolumes[_].driver == volume.flexVolume.driver\n        }\n\n        input_flexvolumes[v] {\n            v := input.review.object.spec.volumes[_]\n            has_field(v, "flexVolume")\n        }\n\n        # has_field returns whether an object has a field\n        has_field(object, field) = true {\n            object[field]\n        }\n\n')),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"flexvolume-drivers"),(0,r.kt)("blockquote",null,(0,r.kt)("details",null,(0,r.kt)("summary",null,"constraint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPFlexVolumes\nmetadata:\n  name: psp-flexvolume-drivers\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Pod"]\n  parameters:\n    allowedFlexVolumes: #[]\n    - driver: "example/lvm"\n    - driver: "example/cifs"\n\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"example-allowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-flexvolume-driver-allowed\n  labels:\n    app: nginx-flexvolume-driver\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    volumeMounts:\n    - mountPath: /test\n      name: test-volume\n      readOnly: true\n  volumes:\n  - name: test-volume\n    flexVolume:\n      driver: "example/lvm"\n\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"example-disallowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-flexvolume-driver-disallowed\n  labels:\n    app: nginx-flexvolume-driver\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    volumeMounts:\n    - mountPath: /test\n      name: test-volume\n      readOnly: true\n  volumes:\n  - name: test-volume\n    flexVolume:\n      driver: "example/testdriver" #"example/lvm"\n\n'))))))}u.isMDXComponent=!0}}]);